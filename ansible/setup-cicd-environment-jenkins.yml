---

- name: Setup TaskList CI/CD Environment on OpenShift with Jenkins
  hosts: openshift
  gather_facts: no
  vars:
  - application_name: tasklist
  - build_namespace: "{{ application_name }}-build"
  - dev_namespace: "{{ application_name }}-dev"
  - build_timeout: '20'
  - deployment_timeout: '10'
  - development_pipeline_file: development-pipeline.groovy
  - release_pipeline_file: release-pipeline.groovy
  - context_dir: openshift/jenkins
  - development_branch: develop
  - target_imagestream_name: tasklist
  - ssh_private_key_value: "{{ vault_ssh_private_key_value }}"
  - source_clone_username: "{{ vault_source_clone_username }}"
  - source_clone_password: "{{ vault_source_clone_password }}"
  - image_pull_password: "{{ vault_image_pull_password }}"
  - image_pull_username: "{{ vault_image_pull_username }}"

  tasks:
  - name: Login to OpenShift
    include_role:
      name: openshift-login
    vars:
      login_url: "{{ ocp_login_url }}"

  - name: Build namespace exists
    include_role:
      name: create-namespace
    vars:
      namespace_name: "{{ build_namespace }}"

  - name: Create image pull secret
    include_role:
      name: create-image-pull-secret
    vars:
      namespace: "{{ build_namespace }}"
      username: "{{ image_pull_username }}"
      password: "{{ image_pull_password }}"
      email: "{{ image_pull_email }}"

  - name: Deploy Jenkins to build namespace
    include_role:
      name: deploy-jenkins
    vars:
      jenkins_namespace: "{{ build_namespace }}"
      role_dir: "{{ playbook_dir }}/roles/deploy-jenkins"

  - name: Setup development namespace
    include_role:
      name: setup-namespace
    vars:
      namespace_name: "{{ dev_namespace }}"
      jenkins_namespace: "{{ build_namespace }}"

  - name: Setup base image imagestream
    shell: "oc apply -f {{ playbook_dir }}/files/is-baseimage.yaml -n {{ build_namespace }} --overwrite"

  - name: Create source clone secret
    include_role:
      name: create-source-clone-secret
    vars:
      namespace: "{{ build_namespace }}"
      url: "{{ git_url }}"
      ssh_key: "{{ ssh_private_key_value }}"
      username: "{{ source_clone_username }}"
      password: "{{ source_clone_password }}"
      application_label: "{{ application_name }}"

  - name: Get existing pipelines
    shell: "oc get bc -n {{ build_namespace }}"
    ignore_errors: true
    register: build_project_bcs

  - name: Get existing secrets
    shell: "oc get secret -n {{ build_namespace }}"
    ignore_errors: true
    register: build_project_secrets

  - name: Setup development pipeline
    include_role:
      name: create-develop-pipeline
    vars:
      build_ns: "{{ build_namespace }}"
      dev_ns: "{{ dev_namespace }}"
      existing_build_project_secrets: "{{ build_project_secrets }}"

  - name: Trigger development pipeline
    uri:
      url: "{{ develop_generic_trigger_url.stdout }}"
      method: POST
      validate_certs: no
    when: trigger_development_pipeline is defined and trigger_development_pipeline

  - name: Print github trigger url for development pipeline
    debug:
      msg: "GitHub trigger url for development pipeline: {{ develop_github_trigger_url.stdout }}"

  - name: Print generic trigger url for development pipeline
    debug:
      msg: "Generic trigger url for development pipeline: {{ develop_generic_trigger_url.stdout }}"
